import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter, YearLocator

# --- 1. Data Simulation (Extending to 10 Years) ---
def generate_simulated_data(n_days=3650, btc_start=500, vix_start=18):
    """
    Generates simulated daily price data for BTC and VIX over 10 years.
    This replaces reading an external file, ensuring the script is runnable.
    """
    np.random.seed(42)
    dates = pd.date_range(start='2015-01-01', periods=n_days, freq='D')

    # Simulate BTC Prices (High growth/volatility, appropriate for 2015-2025 period)
    btc_returns = np.random.normal(loc=0.001, scale=0.03, size=n_days)
    btc_prices = btc_start * np.exp(np.cumsum(btc_returns))

    # Simulate VIX Prices (Inverse influence, volatility clusters)
    vix_returns = np.random.normal(loc=0.00, scale=0.04, size=n_days)
    # Introduce a slight, but not perfect, inverse bias to BTC returns
    inverse_influence = -0.07 * btc_returns
    vix_returns = vix_returns + inverse_influence

    vix_prices = vix_start * np.exp(np.cumsum(vix_returns))

    # Create the DataFrame
    df = pd.DataFrame({
        'BTC_Close': btc_prices,
        'VIX_Close': vix_prices
    }, index=dates)

    return df

# Get the 10-year simulated data
df = generate_simulated_data()

# --- 2. Calculate Daily Percentage Returns and Rolling 90-Day Correlation ---
WINDOW_SIZE = 90
btc_returns = df['BTC_Close'].pct_change().dropna()
vix_returns = df['VIX_Close'].pct_change().dropna()
rolling_corr = btc_returns.rolling(window=WINDOW_SIZE).corr(vix_returns).dropna()

# --- 3. Calculate Key Statistics for Separate Table ---
mean_corr = rolling_corr.mean()
median_corr = rolling_corr.median()
std_corr = rolling_corr.std()

# --- 4. Generate Clean Plot ---

plt.style.use('default')
fig, ax = plt.subplots(figsize=(16, 7))

# Plot the rolling correlation line
rolling_corr.plot(
    ax=ax,
    color='#0077b6',
    linewidth=2,
    label=f'{WINDOW_SIZE}-Day Rolling Correlation'
)

# Highlight the zero line
ax.axhline(0, color='red', linestyle='--', linewidth=1.2, label='Zero Correlation')

# Add Clear Axis Titles and Title
ax.set_title(f'10-Year Rolling {WINDOW_SIZE}-Day Correlation: BTC Returns vs VIX Returns', fontsize=16, fontweight='bold', pad=20)
ax.set_ylabel('Correlation Coefficient (œÅ)', fontsize=12)
ax.set_xlabel('Year', fontsize=12) # Changed label to 'Year'

# --- X-Axis Formatting: Show only the Year ---
ax.xaxis.set_major_locator(YearLocator())
ax.xaxis.set_major_formatter(DateFormatter('%Y'))
ax.tick_params(axis='x', rotation=45) # Rotate for better visibility

# Final Plot Cleanup (Remove gridlines and unnecessary clutter)
ax.tick_params(axis='both', which='major', labelsize=10)
ax.legend(loc='lower left', frameon=True)
ax.grid(False)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_linewidth(0.5)
ax.spines['bottom'].set_linewidth(0.5)

plt.tight_layout()
plt.show()

# --- 5. Display Statistics in Separate Table/Text Format ---
print("\n--- Key Statistical Summary of 10-Year Rolling Correlation ---")
print("| Metric | Value | Interpretation |")
print("|:---|:---:|:---|")
print(f"| **Mean Correlation** | **{mean_corr:.4f}** | Shows BTC's typical relationship with VIX over the entire 10-year period. |")
print(f"| **Median Correlation** | **{median_corr:.4f}** | The mid-point of correlation values, less affected by extreme outliers. |")
print(f"| **Std. Deviation** | **{std_corr:.4f}** | Measures the stability of the correlation (stability of the hedge). |")

# Results are saved in a word doc
